{"version":3,"sources":["../../src/utils/index.ts","../../src/utils/date.ts","../../src/utils/code.ts"],"sourcesContent":["export * from './date'\nexport * from './code'\n","/**\n * Utilities for date formatting and manipulation\n */\n\nexport const formatDate = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(d)\n}\n\nexport const formatTime = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(d)\n}\n\nexport const formatDateTime = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(d)\n}\n\nexport const formatDateShort = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric'\n  }).format(d)\n}\n\nexport const isToday = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  const today = new Date()\n  return d.toDateString() === today.toDateString()\n}\n\nexport const isFuture = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return d.getTime() > Date.now()\n}\n\nexport const isPast = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return d.getTime() < Date.now()\n}\n\nexport const getTimeUntil = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  const now = new Date()\n  const diff = d.getTime() - now.getTime()\n\n  if (diff <= 0) return null\n\n  const minutes = Math.floor(diff / (1000 * 60))\n  const hours = Math.floor(minutes / 60)\n  const days = Math.floor(hours / 24)\n\n  if (days > 0) return `Dans ${days} jour${days > 1 ? 's' : ''}`\n  if (hours > 0) return `Dans ${hours}h${minutes % 60 > 0 ? (minutes % 60) + 'min' : ''}`\n  if (minutes > 0) return `Dans ${minutes} minute${minutes > 1 ? 's' : ''}`\n\n  return 'Bientôt'\n}\n","/**\n * Utilitaires pour la génération et validation de codes d'activité\n */\n\n/**\n * Génère un code d'activité unique de 8 caractères alphanumériques\n * Format: A-Z, 0-9 (majuscules uniquement)\n * Exemple: \"A1B2C3D4\"\n */\nexport function generateActivityCode(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let code = ''\n\n  for (let i = 0; i < 8; i++) {\n    const randomIndex = Math.floor(Math.random() * chars.length)\n    code += chars[randomIndex]\n  }\n\n  return code\n}\n\n/**\n * Valide le format d'un code d'activité\n * Doit être composé de 8 caractères alphanumériques majuscules\n */\nexport function isValidActivityCode(code: string): boolean {\n  const codeRegex = /^[A-Z0-9]{8}$/\n  return codeRegex.test(code)\n}\n\n/**\n * Formate un code pour l'affichage (ajoute un espace tous les 4 caractères)\n * Exemple: \"A1B2C3D4\" -> \"A1B2 C3D4\"\n */\nexport function formatActivityCode(code: string): string {\n  if (!isValidActivityCode(code)) {\n    return code\n  }\n  return `${code.slice(0, 4)} ${code.slice(4)}`\n}\n\n/**\n * Nettoie un code saisi par l'utilisateur\n * Supprime les espaces et convertit en majuscules\n */\nexport function sanitizeActivityCode(input: string): string {\n  return input.replace(/\\s/g, '').toUpperCase()\n}\n"],"mappings":"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","names":[]}