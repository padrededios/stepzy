{"version":3,"sources":["../src/index.ts","../src/types/activity.ts","../src/constants/sports.ts","../src/utils/date.ts"],"sourcesContent":["// Re-export everything from types, constants, and utils\nexport * from './types'\nexport * from './constants'\nexport * from './utils'\n","/**\n * Types pour le système d'activités récurrentes\n */\n\nimport type { SportType } from '../constants/sports'\n\nexport type RecurringType = 'weekly' | 'monthly'\nexport type SessionStatus = 'active' | 'cancelled' | 'completed'\nexport type ParticipantStatus = 'interested' | 'confirmed' | 'waiting'\n\nexport type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday'\n\nexport interface Activity {\n  id: string\n  name: string\n  description?: string\n  sport: SportType\n  minPlayers: number\n  maxPlayers: number\n  createdBy: string\n  isPublic: boolean\n  createdAt: Date\n  updatedAt: Date\n\n  // Récurrence\n  recurringDays: DayOfWeek[]\n  recurringType: RecurringType\n  startTime: string // Format HH:MM\n  endTime: string   // Format HH:MM\n\n  // Relations\n  creator: {\n    id: string\n    pseudo: string\n    avatar: string | null\n  }\n  sessions?: ActivitySession[]\n}\n\nexport interface ActivitySession {\n  id: string\n  activityId: string\n  date: Date\n  status: SessionStatus\n  maxPlayers: number\n  isCancelled: boolean\n  createdAt: Date\n  updatedAt: Date\n\n  // Relations\n  activity?: Activity\n  participants?: ActivityParticipant[]\n\n  // Computed fields\n  currentParticipants?: number\n  confirmedParticipants?: number\n  waitingParticipants?: number\n}\n\nexport interface ActivityParticipant {\n  id: string\n  sessionId: string\n  userId: string\n  status: ParticipantStatus\n  joinedAt: Date\n\n  // Relations\n  session?: ActivitySession\n  user: {\n    id: string\n    pseudo: string\n    avatar: string | null\n  }\n}\n\n// Types pour les formulaires\nexport interface CreateActivityData {\n  name: string\n  description?: string\n  sport: SportType\n  minPlayers: number\n  maxPlayers: number\n  recurringDays: DayOfWeek[]\n  recurringType: RecurringType\n  startTime: string\n  endTime: string\n}\n\nexport interface UpdateActivityData {\n  name?: string\n  description?: string\n  minPlayers?: number\n  maxPlayers?: number\n  recurringDays?: DayOfWeek[]\n  recurringType?: RecurringType\n}\n\nexport interface UpdateSessionData {\n  maxPlayers?: number\n  isCancelled?: boolean\n}\n\n// Types pour les vues\nexport interface ActivityWithStats extends Activity {\n  totalSessions: number\n  upcomingSessions: number\n  totalParticipants: number\n  averageParticipation: number\n}\n\nexport interface SessionWithParticipants extends ActivitySession {\n  participants: ActivityParticipant[]\n  currentParticipants: number\n  confirmedParticipants: number\n  waitingParticipants: number\n  userParticipation?: ActivityParticipant | null\n}\n\n// Types pour les requêtes API\nexport interface ActivityFilters {\n  sport?: SportType\n  createdBy?: string\n  isPublic?: boolean\n  recurringType?: RecurringType\n  recurringDays?: DayOfWeek[]\n}\n\nexport interface SessionFilters {\n  activityId?: string\n  status?: SessionStatus\n  dateFrom?: Date\n  dateTo?: Date\n  hasSpots?: boolean\n}\n\n// Configuration des jours de la semaine\nexport const DAY_LABELS: Record<DayOfWeek, string> = {\n  monday: 'Lundi',\n  tuesday: 'Mardi',\n  wednesday: 'Mercredi',\n  thursday: 'Jeudi',\n  friday: 'Vendredi',\n  saturday: 'Samedi',\n  sunday: 'Dimanche'\n}\n\nexport const RECURRING_TYPE_LABELS: Record<RecurringType, string> = {\n  weekly: 'Chaque semaine',\n  monthly: 'Chaque mois'\n}\n\nexport const PARTICIPANT_STATUS_LABELS: Record<ParticipantStatus, string> = {\n  interested: 'Intéressé',\n  confirmed: 'Confirmé',\n  waiting: 'En attente'\n}","export type SportType = 'football' | 'badminton' | 'volley' | 'pingpong' | 'rugby'\n\nexport interface SportConfig {\n  id: SportType\n  name: string\n  icon: string\n  maxPlayers: number\n  minPlayers: number\n  description: string\n  color: string\n}\n\nexport const SPORTS_CONFIG: Record<SportType, SportConfig> = {\n  football: {\n    id: 'football',\n    name: 'Football',\n    icon: '/images/fox_football.jpg',\n    maxPlayers: 12,\n    minPlayers: 8,\n    description: 'Match de football à 5 contre 5 avec remplaçants',\n    color: 'bg-green-500'\n  },\n  badminton: {\n    id: 'badminton',\n    name: 'Badminton',\n    icon: '/images/fox_badminton.png',\n    maxPlayers: 4,\n    minPlayers: 2,\n    description: 'Parties de badminton en simple ou double',\n    color: 'bg-yellow-500'\n  },\n  volley: {\n    id: 'volley',\n    name: 'Volleyball',\n    icon: '/images/fox_volley.png',\n    maxPlayers: 12,\n    minPlayers: 6,\n    description: 'Match de volleyball 6 contre 6',\n    color: 'bg-orange-500'\n  },\n  pingpong: {\n    id: 'pingpong',\n    name: 'Ping-Pong',\n    icon: '/images/fox_pingpong.png',\n    maxPlayers: 4,\n    minPlayers: 2,\n    description: 'Tournoi de ping-pong en simple ou double',\n    color: 'bg-red-500'\n  },\n  rugby: {\n    id: 'rugby',\n    name: 'Rugby',\n    icon: '/images/fox_rugbypng.png',\n    maxPlayers: 15,\n    minPlayers: 10,\n    description: 'Match de rugby à XV',\n    color: 'bg-purple-500'\n  }\n}\n\nexport const getSportConfig = (sport: SportType): SportConfig => {\n  return SPORTS_CONFIG[sport]\n}\n\nexport const getAllSports = (): SportConfig[] => {\n  return Object.values(SPORTS_CONFIG)\n}\n","/**\n * Utilities for date formatting and manipulation\n */\n\nexport const formatDate = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(d)\n}\n\nexport const formatTime = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(d)\n}\n\nexport const formatDateTime = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(d)\n}\n\nexport const formatDateShort = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return new Intl.DateTimeFormat('fr-FR', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric'\n  }).format(d)\n}\n\nexport const isToday = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  const today = new Date()\n  return d.toDateString() === today.toDateString()\n}\n\nexport const isFuture = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return d.getTime() > Date.now()\n}\n\nexport const isPast = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  return d.getTime() < Date.now()\n}\n\nexport const getTimeUntil = (date: Date | string) => {\n  const d = typeof date === 'string' ? new Date(date) : date\n  const now = new Date()\n  const diff = d.getTime() - now.getTime()\n\n  if (diff <= 0) return null\n\n  const minutes = Math.floor(diff / (1000 * 60))\n  const hours = Math.floor(minutes / 60)\n  const days = Math.floor(hours / 24)\n\n  if (days > 0) return `Dans ${days} jour${days > 1 ? 's' : ''}`\n  if (hours > 0) return `Dans ${hours}h${minutes % 60 > 0 ? (minutes % 60) + 'min' : ''}`\n  if (minutes > 0) return `Dans ${minutes} minute${minutes > 1 ? 's' : ''}`\n\n  return 'Bientôt'\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACwIO,IAAM,aAAwC;AAAA,EACnD,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,WAAW;AAAA,EACX,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,QAAQ;AACV;AAEO,IAAM,wBAAuD;AAAA,EAClE,QAAQ;AAAA,EACR,SAAS;AACX;AAEO,IAAM,4BAA+D;AAAA,EAC1E,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AACX;;;AC/IO,IAAM,gBAAgD;AAAA,EAC3D,UAAU;AAAA,IACR,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,OAAO;AAAA,EACT;AAAA,EACA,WAAW;AAAA,IACT,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,OAAO;AAAA,EACT;AAAA,EACA,QAAQ;AAAA,IACN,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,OAAO;AAAA,EACT;AAAA,EACA,UAAU;AAAA,IACR,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,OAAO;AAAA,EACT;AAAA,EACA,OAAO;AAAA,IACL,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,OAAO;AAAA,EACT;AACF;AAEO,IAAM,iBAAiB,CAAC,UAAkC;AAC/D,SAAO,cAAc,KAAK;AAC5B;AAEO,IAAM,eAAe,MAAqB;AAC/C,SAAO,OAAO,OAAO,aAAa;AACpC;;;AC9DO,IAAM,aAAa,CAAC,SAAwB;AACjD,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,SAAO,IAAI,KAAK,eAAe,SAAS;AAAA,IACtC,SAAS;AAAA,IACT,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,EACP,CAAC,EAAE,OAAO,CAAC;AACb;AAEO,IAAM,aAAa,CAAC,SAAwB;AACjD,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,SAAO,IAAI,KAAK,eAAe,SAAS;AAAA,IACtC,MAAM;AAAA,IACN,QAAQ;AAAA,EACV,CAAC,EAAE,OAAO,CAAC;AACb;AAEO,IAAM,iBAAiB,CAAC,SAAwB;AACrD,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,SAAO,IAAI,KAAK,eAAe,SAAS;AAAA,IACtC,SAAS;AAAA,IACT,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,IACL,MAAM;AAAA,IACN,QAAQ;AAAA,EACV,CAAC,EAAE,OAAO,CAAC;AACb;AAEO,IAAM,kBAAkB,CAAC,SAAwB;AACtD,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,SAAO,IAAI,KAAK,eAAe,SAAS;AAAA,IACtC,KAAK;AAAA,IACL,OAAO;AAAA,IACP,MAAM;AAAA,EACR,CAAC,EAAE,OAAO,CAAC;AACb;AAEO,IAAM,UAAU,CAAC,SAAwB;AAC9C,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,QAAM,QAAQ,oBAAI,KAAK;AACvB,SAAO,EAAE,aAAa,MAAM,MAAM,aAAa;AACjD;AAEO,IAAM,WAAW,CAAC,SAAwB;AAC/C,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,SAAO,EAAE,QAAQ,IAAI,KAAK,IAAI;AAChC;AAEO,IAAM,SAAS,CAAC,SAAwB;AAC7C,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,SAAO,EAAE,QAAQ,IAAI,KAAK,IAAI;AAChC;AAEO,IAAM,eAAe,CAAC,SAAwB;AACnD,QAAM,IAAI,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AACtD,QAAM,MAAM,oBAAI,KAAK;AACrB,QAAM,OAAO,EAAE,QAAQ,IAAI,IAAI,QAAQ;AAEvC,MAAI,QAAQ,EAAG,QAAO;AAEtB,QAAM,UAAU,KAAK,MAAM,QAAQ,MAAO,GAAG;AAC7C,QAAM,QAAQ,KAAK,MAAM,UAAU,EAAE;AACrC,QAAM,OAAO,KAAK,MAAM,QAAQ,EAAE;AAElC,MAAI,OAAO,EAAG,QAAO,QAAQ,IAAI,QAAQ,OAAO,IAAI,MAAM,EAAE;AAC5D,MAAI,QAAQ,EAAG,QAAO,QAAQ,KAAK,IAAI,UAAU,KAAK,IAAK,UAAU,KAAM,QAAQ,EAAE;AACrF,MAAI,UAAU,EAAG,QAAO,QAAQ,OAAO,UAAU,UAAU,IAAI,MAAM,EAAE;AAEvE,SAAO;AACT;","names":[]}